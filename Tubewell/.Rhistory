R_square <- 1 - SSE / SST
R_square
modeldat <- read.csv("E:\\ResearchProject\\Monisha\\data\\Rainfall.CSV")
modeldat%>%head()
monthly <- aggregate(modeldat$Rainfall, by= list(modeldat$Month, modeldat$Year), FUN=mean, na.rm=TRUE) # Seasonal mean mean EIP of 22,006 Farms (3 seasons)
monthly
monthly_data <- ts(monthly$x,start = c(1981, 1), frequency = 12)
#ARIMA
library(forecast)
library(MASS)
library(tseries)
library(forecast)
library(lubridate)
library(ggplot2)
library(zoo)
autoplot(monthly_data)
auto.arima(monthly_data)
Fit <- arima(monthly_data, order = c(3,0,1), seasonal = list(order = c(0,1,1), period = 12))
fcast <- forecast(Fit, h=120)
summary(Fit)
z <- autoplot(fcast, main=NULL)  +
xlab("Monthly Data") + ylab("Rainfall (mm)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
z
#R2
SSE <- sum((Fit$residuals^2))
SST <- sum((monthly$x - (mean(monthly$x)))^2)
R_square <- 1 - SSE / SST
R_square
library(tidyverse)
library(fpp2)
ses.goog <- ses(monthly_data,alpha = 0.1,
h = 120)
summary(ses.goog)
fcast <- forecast(ses.goog, h=120)
x <- autoplot(fcast, main=NULL)+
xlab("Years") + ylab("Rainfall (mm)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
x
modeldat <- read.csv("E:\\ResearchProject\\Monisha\\data\\WL.CSV")
modeldat%>%head()
monthly <- aggregate(modeldat$WL, by= list(modeldat$Month, modeldat$Year), FUN=mean, na.rm=TRUE) # Seasonal mean mean EIP of 22,006 Farms (3 seasons)
monthly$x
monthly_data <- ts(monthly$x,start = c(1981, 1), end = c(2020, 12), frequency = 12)
dat_ts = ts(monthly_data)
fit <- nnetar(dat_ts, lambda=0.5)
fit
autoplot(forecast(fit,h=120))
z <- autoplot(forecast(fit,h=120))  +
xlab("Months") + ylab("Water Level (mm)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
z <- autoplot(forecast(fit,h=120))  +
xlab("Monthly Data") + ylab("Water Level (mm)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
z
fcast <- forecast(fit, PI=TRUE, h=120)
z <- autoplot(fcast)  + xlab("Monthly Data") + ylab("Water Level (m)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
z
sweep::sw_glance(fit)
#fcast%>%head()%>%kable()
forecast::forecast(fit,h=12,level = c(90, 95))%>%tk_tbl()
#ARIMA
library(forecast)
library(MASS)
library(tseries)
library(forecast)
library(lubridate)
library(ggplot2)
library(zoo)
autoplot(monthly_data)
auto.arima(monthly_data)
Fit <- arima(monthly_data, order = c(3,0,1), seasonal = list(order = c(0,1,1), period = 12))
fcast <- forecast(Fit, h=120)
summary(Fit)
z <- autoplot(fcast, main=NULL)  +
xlab("Years") + ylab("Rainfall (mm)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
z <- autoplot(fcast, main=NULL)  +
xlab("Monthly Data") + ylab("Water Level (m)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
z
library(tidyverse)
library(fpp2)
ses.goog <- ses(monthly_data,alpha = 0.1,
h = 120)
summary(ses.goog)
fcast <- forecast(ses.goog, h=120)
x <- autoplot(fcast, main=NULL)+
xlab("Monthly Data") + ylab("Water Level (m)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
x
accuracy(ses.goog)
library(ggthemes)
library(forecast)
library(tidyverse)
library(tseries)
library(lubridate)
library(timetk)
library(readxl)
library(tidyquant)
library(scales)
library(forecast)   #  forecasting pkg
library(sweep)   # Broom tidiers for forecast pkg
library(broom)
library(tibble)
library(stringr)
library(highcharter)
library(knitr)
theme_set(theme_bw())
library(MASS)
require(foreign)
require(ggplot2)
require(maptools)
library(tidyverse)
library(betareg)
library(car)
library(gapminder)
library(dplyr)
library(ggplot2)
library(dplyr)
library(patchwork) # To display 2 charts together
library(hrbrthemes)
library(psych) # for descriptive analysis
library(forecast)
library(lmtest)
library(tseries)
modeldat <- read.csv("E:\\ResearchProject\\Monisha\\data\\Rainfall.CSV")
modeldat%>%head()
monthly <- aggregate(modeldat$Rainfall, by= list(modeldat$Month, modeldat$Year), FUN=mean, na.rm=TRUE) # Seasonal mean mean EIP of 22,006 Farms (3 seasons)
monthly
monthly_data <- ts(monthly$x,start = c(1981, 1), frequency = 12)
dat_ts = ts(monthly_data)
fit <- nnetar(dat_ts, lambda=0.5)
fit
autoplot(forecast(fit,h=120))
z <- autoplot(forecast(fit,h=120))  +
xlab("Months") + ylab("Rainfall (mm)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
z
fcast <- forecast(fit, PI=TRUE, h=120)
autoplot(fcast)
z <- autoplot(fcast)  + xlab("Monthly Data") + ylab("Rainfall (mm)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
z
sweep::sw_glance(fit)
#fcast%>%head()%>%kable()
forecast::forecast(fit,h=12,level = c(90, 95))%>%tk_tbl()
#ARIMA
library(forecast)
library(MASS)
library(tseries)
library(forecast)
library(lubridate)
library(ggplot2)
library(zoo)
autoplot(monthly_data)
auto.arima(monthly_data)
Fit <- arima(monthly_data, order = c(3,0,1), seasonal = list(order = c(0,1,1), period = 12))
fcast <- forecast(Fit, h=120)
summary(Fit)
z <- autoplot(fcast, main=NULL)  +
xlab("Monthly Data") + ylab("Rainfall (mm)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
z
autoplot(monthly_data)
auto.arima(monthly_data)
Fit <- arima(monthly_data, order = c(3,0,1), seasonal = list(order = c(0,1,1), period = 12))
z <- autoplot(fcast, main=NULL)  +
xlab("Monthly Data") + ylab("Rainfall (mm)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
z
#R2
SSE <- sum((Fit$residuals^2))
SST <- sum((monthly$x - (mean(monthly$x)))^2)
R_square <- 1 - SSE / SST
R_square
library(tidyverse)
library(fpp2)
ses.goog <- ses(monthly_data,alpha = 0.1,
h = 120)
summary(ses.goog)
fcast <- forecast(ses.goog, h=120)
x <- autoplot(fcast, main=NULL)+
xlab("Years") + ylab("Rainfall (mm)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
x <- autoplot(fcast, main=NULL)+
xlab("Monthly Data") + ylab("Rainfall (mm)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
x
modeldat <- read.csv("E:\\ResearchProject\\Monisha\\data\\WL.CSV")
modeldat%>%head()
monthly <- aggregate(modeldat$WL, by= list(modeldat$Month, modeldat$Year), FUN=mean, na.rm=TRUE) # Seasonal mean mean EIP of 22,006 Farms (3 seasons)
monthly$x
monthly_data <- ts(monthly$x,start = c(1981, 1), end = c(2020, 12), frequency = 12)
dat_ts = ts(monthly_data)
fit <- nnetar(dat_ts, lambda=0.5)
fit
autoplot(forecast(fit,h=120))
#fcast%>%head()%>%kable()
forecast::forecast(fit,h=12,level = c(90, 95))%>%tk_tbl()
#ARIMA
library(forecast)
library(MASS)
library(tseries)
library(forecast)
library(lubridate)
library(ggplot2)
library(zoo)
autoplot(monthly_data)
auto.arima(monthly_data)
Fit <- arima(monthly_data, order = c(3,0,1), seasonal = list(order = c(0,1,1), period = 12))
fcast <- forecast(Fit, h=120)
summary(Fit)
z <- autoplot(fcast, main=NULL)  +
xlab("Monthly Data") + ylab("Water Level (m)") + theme(legend.position="bottom") +
theme( legend.title = element_text(color = "Black", size = 8),
legend.text = element_text(color = "Black", size = 8))
# improved correlation matrix
library(corrplot)
setwd('E:\ResearchProject\Jakariya')
setwd('E:\\ResearchProject\\Jakariya')
COVID <- read.csv("Tubewell_Project_concise.csv")
dat <- read.csv("Tubewell_Project_concise.csv")
corrplot(cor(dat),
method = "number",
type = "upper" # show only upper side
)
setwd('E:\\ResearchProject\\Jakariya')
dat <- read.csv("Tubewell_Project_concise.csv")
corrplot(cor(dat),
method = "number",
type = "upper" # show only upper side
)
dat
setwd('E:\\ResearchProject\\Jakariya')
dat <- read.csv("Tubewell_Project_concise.csv")
corrplot(cor(dat),
method = "number",
type = "upper" # show only upper side
)
library("ggpubr")
ggscatter(my_data, x = "Deapth", y = "Arsenic",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
ggscatter(dat, x = "Deapth", y = "Arsenic",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
ggscatter(dat, x = "Deapth", y = "Iron",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
ggscatter(dat, x = "Deapth", y = "Iron",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
ggscatter(dat, x = "Deapth", y = "Iron",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
ggscatter(dat, x = "Arsenic", y = "Iron",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
corrplot(cor(dat),
method = "number",
type = "upper" # show only upper side
)
ggscatter(dat, x = "Deapth", y = "Manganese",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
cor(dat$Deapth,dat$Arsenic)
corrplot(cor(dat),
method = "number",
type = "upper" # show only upper side
)
cor(dat$Deapth~dat$Arsenic)
cor(dat$Deapth,dat$Arsenic)
corr(dat$Deapth,dat$Arsenic)
cor(dat$Deapth,dat$Arsenic)
cor.test(dat$Deapth,dat$Arsenic)
library("ggpubr")
ggscatter(dat, x = "Deapth", y = "Manganese",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
require("corrplot")
rquery.cormat(dat)
require("corrplot")
rquery.cormat(dat)
library(Hmisc)
res <- rcorr(as.matrix(dat)) # rcorr() accepts matrices only
# display p-values (rounded to 3 decimals)
round(res$P, 3)
res
# display p-values (rounded to 3 decimals)
round(res, 3)
# display p-values (rounded to 3 decimals)
round(res$r, 3)
corrplot(cor(dat),
method = "number",
type = "upper" # show only upper side
)
setwd('E:\\ResearchProject\\Jakariya')
dat <- read.csv("Tubewell_Project_concise.csv")
library(Hmisc)
res <- rcorr(as.matrix(dat)) # rcorr() accepts matrices only
# display p-values (rounded to 3 decimals)
round(res$r, 3)
corrplot(cor(dat),
method = "number",
type = "upper" # show only upper side
)
corrplot(cor(dat),
method = "number",
type = "upper" # show only upper side
)
cor.test(dat$Deapth,dat$Arsenic)
cor.test(dat$Depth,dat$Arsenic)
library("ggpubr")
ggscatter(dat, x = "Deapth", y = "Manganese",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
ggscatter(dat, x = "Depth", y = "Manganese",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
corrplot(cor(dat),
method = "number",
type = "upper" # show only upper side
)
library("ggpubr")
ggscatter(dat, x = "Depth", y = "Manganese",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
ggscatter(dat, x = "Depth", y = "Manganese",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE,
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
p <- dat %>%
ggplot(aes(x=Gene,y=Ct.Value)) +
geom_boxplot() + geom_jitter(alpha=0.1) +labs(y="Ct (number of cycles)", x = "Gene") +  scale_fill_brewer(palette="Accent")+
theme(axis.title=element_text(size=15), legend.position="bottom"
,axis.text.y = element_text(colour="grey20",size=12)
,axis.text.x = element_text(colour="grey20",size=12)
,legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12))
p <- p
p
p <- dat %>%
ggplot(dat$Arsenic) +
geom_boxplot() + geom_jitter(alpha=0.1) +labs(y="Ct (number of cycles)", x = "Gene") +  scale_fill_brewer(palette="Accent")+
theme(axis.title=element_text(size=15), legend.position="bottom"
,axis.text.y = element_text(colour="grey20",size=12)
,axis.text.x = element_text(colour="grey20",size=12)
,legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12))
p <- dat %>%
geom_boxplot(dat$Arsenic) + geom_jitter(alpha=0.1) +labs(y="Ct (number of cycles)", x = "Gene") +  scale_fill_brewer(palette="Accent")+
theme(axis.title=element_text(size=15), legend.position="bottom"
,axis.text.y = element_text(colour="grey20",size=12)
,axis.text.x = element_text(colour="grey20",size=12)
,legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12))
p <- geom_boxplot(dat$Arsenic) + geom_jitter(alpha=0.1) +labs(y="Ct (number of cycles)", x = "Gene") +  scale_fill_brewer(palette="Accent")+
theme(axis.title=element_text(size=15), legend.position="bottom"
,axis.text.y = element_text(colour="grey20",size=12)
,axis.text.x = element_text(colour="grey20",size=12)
,legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12))
library(corrplot)
library(RColorBrewer)
M <-cor(dat)
corrplot(M, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
p <- ggplot(data = dat, aes(x = dat$Depth)) + geom_boxplot() + geom_jitter(alpha=0.1) +labs(y="Ct (number of cycles)", x = "Gene") +  scale_fill_brewer(palette="Accent")+
theme(axis.title=element_text(size=15), legend.position="bottom"
,axis.text.y = element_text(colour="grey20",size=12)
,axis.text.x = element_text(colour="grey20",size=12)
,legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12))
p <- p
p
p <- ggplot(data = dat, aes(x = dat$Depth)) + geom_boxplot() labs(y="Ct (number of cycles)", x = "Gene") +  scale_fill_brewer(palette="Accent")+
theme(axis.title=element_text(size=15), legend.position="bottom"
,axis.text.y = element_text(colour="grey20",size=12)
,axis.text.x = element_text(colour="grey20",size=12)
,legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12))
p <- p
p
p <- ggplot(data = dat, aes(x = dat$Depth)) + geom_boxplot() +labs(y="Ct (number of cycles)", x = "Gene") +  scale_fill_brewer(palette="Accent")+
theme(axis.title=element_text(size=15), legend.position="bottom"
,axis.text.y = element_text(colour="grey20",size=12)
,axis.text.x = element_text(colour="grey20",size=12)
,legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12))
p <- p
p
p
p <- ggplot(data = dat, aes(x = dat$Depth)) + geom_boxplot() +labs(y="Ct (number of cycles)", x = "Gene")
p
p <- ggplot(data = dat, aes(x = Depth)) + geom_boxplot() +labs(y="Ct (number of cycles)", x = "Gene")
p
p <- ggplot(data = dat, aes(x = "", y = Depth)) + geom_boxplot() +labs(y="Ct (number of cycles)", x = "Gene")
p
p <- ggplot(data = dat, aes(x = "", y = Depth)) + geom_boxplot(fill = 2,
alpha = 0.5,
color = 1,
outlier.colour = 2) +labs(y="Ct (number of cycles)", x = "Gene")
p
p <- ggplot(data = dat, aes(x = "", y = Depth)) + geom_boxplot(fill = 2,
alpha = 0.5,
color = 2,
outlier.colour = 2) +labs(y="Ct (number of cycles)", x = "Gene")
p
p <- ggplot(data = dat, aes(x = "", y = Depth)) + geom_boxplot(fill = 2,
alpha = 0.5,
color = 1,
outlier.colour = 2) +labs(y="Ct (number of cycles)", x = "Gene")
p
p <- ggplot(data = dat, aes(x = "", y = Depth)) + geom_boxplot(fill = 1,
alpha = 0.5,
color = 1,
outlier.colour = 2) +labs(y="Ct (number of cycles)", x = "Gene")
p
p <- ggplot(data = dat, aes(x = "", y = Depth)) + geom_boxplot(fill = 2,
alpha = 0.5,
color = 1,
outlier.colour = 2) +labs(y="Ct (number of cycles)", x = "Gene")
p
p <- ggplot(data = dat, aes(x = "", y = Depth)) + geom_boxplot(fill = 3,
alpha = 0.5,
color = 1,
outlier.colour = 2) +labs(y="Ct (number of cycles)", x = "Gene")
p
p <- ggplot(data = dat, aes(x = "", y = Depth)) + geom_boxplot(fill = 1,
alpha = 0.5,
color = 1,
outlier.colour = 2) +labs(y="Ct (number of cycles)", x = "Gene")
p
p <- ggplot(data = dat, aes(x = "", y = Depth)) + geom_boxplot(fill = 1,
alpha = 0.5,
color = 1,
outlier.colour = 1) +labs(y="Ct (number of cycles)", x = "Gene")
p
p <- ggplot(data = dat, aes(x = "", y = Depth)) + geom_boxplot(fill = 1,
alpha = 0.5,
color = 1,
outlier.colour = 1) +labs(y="Feet", x = "Depth")
p
p <- ggplot(data = dat, aes(x = "", y = Arsenic)) + geom_boxplot(fill = 1,
alpha = 0.5,
color = 1,
outlier.colour = 1) +labs(y="Feet", x = "Depth")
p
p <- ggplot(data = dat, aes(x = "", y = Arsenic)) + geom_boxplot(fill = 2,
alpha = 0.5,
color = 1,
outlier.colour = 2) +labs(y="Feet", x = "Depth")
p
p <- ggplot(data = dat, aes(x = "", y = Arsenic)) + geom_boxplot(fill = 2,
alpha = 0.5,
color = 1,
outlier.colour = 2) +labs(y="mg/L", x = "Arsenic")
p
p <- ggplot(data = dat, aes(x = "", y = Manganese)) + geom_boxplot(fill = 3,
alpha = 0.5,
color = 1,
outlier.colour = 3) +labs(y="mg/L", x = "Manganese")
p
p <- ggplot(data = dat, aes(x = "", y = Iron)) + geom_boxplot(fill = 4,
alpha = 0.5,
color = 1,
outlier.colour = 4) +labs(y="mg/L", x = "Iron")
p
library(PerformanceAnalytics)
chart.Correlation(dat, histogram = TRUE, method = "pearson")
fit <- lm(dat$Depth ~.)
fit <- lm(dat$Depth ~., data = dat)
summary(fit)
fit <- lm(dat$Arsenic ~., data = dat)
summary(fit)
fit <- lm(dat$Iron ~., data = dat)
summary(fit)
fit <- lm(dat$Manganese ~., data = dat)
summary(fit)
fit <- lm(dat$Arsenic ~., data = dat)
summary(fit)
fit <- lm(dat$Iron ~., data = dat)
summary(fit)
fit <- lm(dat$Manganese ~., data = dat)
summary(fit)
